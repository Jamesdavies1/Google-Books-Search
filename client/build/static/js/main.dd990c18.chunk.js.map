{"version":3,"sources":["components/books/index.js","components/book/index.js","components/books/Books.js","components/book/Book.js","components/nav.js","pages/home.js","pages/saved.js","App.js","serviceWorker.js","index.js"],"names":["Books","require","module","exports","Book","books","className","map","book","i","key","title","authors","description","imageLinks","infoLink","id","src","thumbnail","href","onClick","axios","post","googleID","Navigation","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Home","useState","updateBooks","searchCriteria","updateCriteria","handleSubmit","e","preventDefault","get","params","q","then","formattedBooks","volumeInfo","formatBooks","data","onSubmit","htmlFor","aria-describedby","value","onChange","target","role","SavedBooks","useEffect","savedBooks","App","exact","path","component","Saved","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dd990c18.chunk.js","sourcesContent":["const Books = require(\"./Books\");\n\nmodule.exports = Books;\n","const Book = require(\"./Book\");\n\nmodule.exports = Book;\n","import React from \"react\";\nimport Book from \"../book\";\nimport \"../books/books.css\";\n\nconst Books = ({ books }) => (\n  <div className=\"\">\n    <h1 className=\"books-text\">Books</h1>\n    {books.map((book, i) => (\n      <Book book={book} key={i} />\n    ))}\n  </div>\n);\n\nexport default Books;\n","import React from \"react\";\nimport axios from \"axios\";\n\nimport \"./book.css\";\n\nconst Book = ({\n  book: { title, authors, description, imageLinks, infoLink, id }\n}) => (\n  <div className=\"card\">\n    <div className=\"card-header\">{title}</div>\n    <ul className=\"list-group list-group-flush\">\n      <li className=\"list-group-item\">Author(s):{authors}</li>\n      <li className=\"list-group-item description\">\n        {description}\n        <img src={imageLinks.thumbnail} className=\"thumbnail\"></img>\n      </li>\n      {/* <img src={imageLinks.smallThumbnail} className=\"thumbnail\"></img> */}\n      <li className=\"list-group-item href\">\n        <a href={infoLink}>{infoLink}</a>\n      </li>\n      <button\n        className=\"save\"\n        onClick={() => {\n          axios.post(\"http://localhost:3001/api/books\", {\n            googleID: id,\n            title,\n            authors,\n            description\n          });\n        }}\n      >\n        Save For Later\n      </button>\n    </ul>\n  </div>\n);\n\nexport default Book;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"../../src\";\n\nfunction Navigation() {\n  return (\n    <div className=\"nav\">\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <Link to=\"/\">\n          <h1 className=\"navbar-brand\">google books</h1>\n        </Link>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarNav\"\n          aria-controls=\"navbarNav\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n          <ul className=\"navbar-nav\">\n            <li className=\"nav-item active\">\n              <Link to=\"/\">\n                <p className=\"nav-link\">\n                  Home <span className=\"sr-only\"></span>\n                </p>\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/saved\">\n                <p className=\"nav-link\">saved</p>\n              </Link>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    </div>\n  );\n}\n\nexport default Navigation;\n","import React, { useState } from \"react\";\nimport axios from \"axios\";\n\nimport \"../../src/style.css\";\nimport Books from \"../components/books\";\nimport Navigation from \"../components/nav\";\n\nconst formatBooks = books =>\n  books.map(({ id, volumeInfo }) => ({ googleID: id, ...volumeInfo }));\n\nfunction Home() {\n  const [books, updateBooks] = useState([]);\n  const [searchCriteria, updateCriteria] = useState(\"\");\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    axios\n      .get(\"http://localhost:3001/api/search\", {\n        params: {\n          q: searchCriteria\n        }\n      })\n      .then(({ data }) => {\n        const formattedBooks = formatBooks(data);\n        updateBooks(formattedBooks);\n      });\n  };\n\n  return (\n    <div>\n      <Navigation />\n\n      <div className=\"jumbotron jumbotron-fluid\">\n        <div className=\"container\">\n          <h1 className=\"display-4\">google books!</h1>\n          <p className=\"lead\">\n            Find your favourite books using the google book API\n          </p>\n        </div>\n      </div>\n      <form onSubmit={e => handleSubmit(e)}>\n        <div className=\"form-group\">\n          <label htmlFor=\"input\">Search book here</label>\n          <input\n            type=\"input\"\n            className=\"form-control\"\n            id=\"input\"\n            aria-describedby=\"emailHelp\"\n            value={searchCriteria}\n            onChange={e => updateCriteria(e.target.value)}\n          />\n          <small id=\"input-help\" className=\"form-text text-muted\">\n            Lets find your favourite book!\n          </small>\n        </div>\n        <button type=\"submit\" className=\"btn btn-primary\" role=\"submit\">\n          Submit\n        </button>\n      </form>\n      {books && <Books books={books} />}\n    </div>\n  );\n}\n\nexport default Home;\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { render } from \"react-dom\";\n\nimport Books from \"../components/books\";\nimport Navigation from \"../components/nav\";\n\nfunction SavedBooks() {\n  const [books, updateBooks] = useState([]);\n\n  useEffect(\n    () =>\n      axios\n        .get(\"http://localhost:3001/api/books\")\n        .then(savedBooks => updateBooks(savedBooks)),\n    []\n  );\n\n  return (\n    <div>\n      <Navigation />\n      <div className=\"jumbotron jumbotron-fluid\">\n        <div className=\"container\">\n          <h1 className=\"display-4\">google books!</h1>\n          <p className=\"lead\">Here are your saved books</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default SavedBooks;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Home from \"./pages/home\";\nimport Navigation from \"./components/nav\";\nimport Saved from \"./pages/saved\";\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/saved\" component={Saved} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}